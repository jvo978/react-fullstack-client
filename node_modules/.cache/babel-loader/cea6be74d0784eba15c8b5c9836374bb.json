{"ast":null,"code":"var _jsxFileName = \"/Users/jasonvo/Code/react-fullstack/client/src/routes/Post.js\",\n    _s = $RefreshSig$();\n\nimport '../css/Post.css';\nimport { useEffect, useState, useContext } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  AuthContext\n} = require(\"../helpers/AuthContext\");\n\nfunction Post() {\n  _s();\n\n  let {\n    id\n  } = useParams();\n  const [postObject, setPostObject] = useState({});\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const {\n    authState\n  } = useContext(AuthContext);\n  let navigate = useNavigate();\n  useEffect(() => {\n    axios.get(`http://localhost:3001/posts/${id}`).then(response => {\n      setPostObject(response.data);\n    });\n    axios.get(`http://localhost:3001/comments/${id}`).then(response => {\n      if (!response.data.length) {\n        console.log('no comments for this post');\n      } else {\n        setComments(response.data);\n      }\n    });\n  }, [id]);\n\n  const addNewComment = () => {\n    axios.post('http://localhost:3001/comments', {\n      commentBody: newComment,\n      PostId: id\n    }, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(response => {\n      if (response.data.error) {\n        console.log(response.data.error);\n      } else {\n        setComments([...comments, {\n          id: response.data.id,\n          commentBody: response.data.commentBody,\n          username: response.data.username\n        }]);\n        setNewComment('');\n      }\n    });\n  };\n\n  const deleteComment = id => {\n    axios.delete(`http://localhost:3001/comments/${id}`, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(() => {\n      setComments(comments.filter(val => {\n        return val.id !== id;\n      }));\n    });\n  };\n\n  const deletePost = id => {\n    axios.delete(`http://localhost:3001/posts/${id}`, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(response => {\n      navigate('/');\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post__container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post__left\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post__title\",\n        children: postObject.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post__body\",\n        children: postObject.postText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post__footer\",\n        children: [postObject.username, authState.username === postObject.username && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            deletePost(postObject.id);\n          },\n          children: \"Delete Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment__right\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"addComment__container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: newComment,\n          type: \"text\",\n          placeholder: \"Comment...\",\n          autoComplete: \"off\",\n          onChange: event => {\n            setNewComment(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNewComment,\n          children: \"Add Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"listOfComments\",\n        children: comments.map((comment, key) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"commentBody\",\n            children: [comment.commentBody, /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Username: \", comment.username]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 29\n            }, this), authState.username === comment.username && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                deleteComment(comment.id);\n              },\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Post, \"6ZEei2oI6sXmyaw+CBd83s/x2oM=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/jasonvo/Code/react-fullstack/client/src/routes/Post.js"],"names":["useEffect","useState","useContext","useParams","useNavigate","axios","AuthContext","require","Post","id","postObject","setPostObject","comments","setComments","newComment","setNewComment","authState","navigate","get","then","response","data","length","console","log","addNewComment","post","commentBody","PostId","headers","accessToken","localStorage","getItem","error","username","deleteComment","delete","filter","val","deletePost","title","postText","event","target","value","map","comment","key"],"mappings":"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","sourcesContent":["import '../css/Post.css';\nimport { useEffect, useState, useContext } from 'react'\nimport { useParams, useNavigate } from 'react-router-dom'\nimport axios from 'axios';\nconst { AuthContext } = require(\"../helpers/AuthContext\")\n\nfunction Post() {\n    let { id } = useParams();\n    const [postObject, setPostObject] = useState({});\n    const [comments, setComments] = useState([]);\n    const [newComment, setNewComment] = useState('');\n    const { authState } = useContext(AuthContext)\n\n    let navigate = useNavigate()\n\n    useEffect(() => {\n         axios.get(`http://localhost:3001/posts/${id}`).then((response) => {\n            setPostObject(response.data)\n        })\n        axios.get(`http://localhost:3001/comments/${id}`).then((response) => {\n            if (!response.data.length) {\n                console.log('no comments for this post')\n            } else {\n                setComments(response.data)\n            } \n        })\n    }, [id]);\n\n    const addNewComment = () => {\n        axios.post('http://localhost:3001/comments', {\n            commentBody: newComment,\n            PostId: id\n        }, {\n            headers: {\n                accessToken: localStorage.getItem(\"accessToken\")\n            } \n        })\n        .then((response) => {\n            if (response.data.error) {\n                console.log(response.data.error)\n            } else {\n                setComments([...comments, { id: response.data.id, commentBody: response.data.commentBody, username: response.data.username }]);\n                setNewComment('');\n            }\n        })\n    }\n\n    const deleteComment = (id) => {\n        axios.delete(`http://localhost:3001/comments/${id}`, { \n            headers: {\n                accessToken: localStorage.getItem(\"accessToken\")\n            }\n        }).then(() => {\n            setComments(comments.filter(val => {\n                return val.id !== id;\n            }))\n        })\n    }\n\n    const deletePost = (id) => {\n        axios.delete(`http://localhost:3001/posts/${id}`, { \n            headers: {\n                accessToken: localStorage.getItem(\"accessToken\")\n            }\n        }).then((response) => {\n            navigate('/')\n        })\n    }\n\n    return (\n        <div className=\"post__container\">\n            <div className=\"post__left\">\n                <div className=\"post__title\">{postObject.title}</div>\n                <div className=\"post__body\">{postObject.postText}</div>\n                <div className=\"post__footer\">{postObject.username}\n                    {authState.username === postObject.username && (\n                        <button onClick={() => {\n                            deletePost(postObject.id)\n                        }}>Delete Post</button>\n                    )}\n                </div>\n            </div>\n            <div className=\"comment__right\">\n                <div className='addComment__container'>\n                    <input value={newComment} type=\"text\" placeholder=\"Comment...\" autoComplete='off' onChange={(event) => { setNewComment(event.target.value) }} />\n                    <button onClick={addNewComment}>Add Comment</button>\n                </div>\n                <div className='listOfComments'>\n                    {comments.map((comment, key) => { \n                        return (\n                            <div className='commentBody'>{comment.commentBody}\n                            <label>Username: {comment.username}</label>\n                            {authState.username === comment.username && (\n                                <button onClick={() =>{ deleteComment(comment.id) }}>Delete</button>\n                            )}\n                        </div>\n                        )\n                    })}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Post\n"]},"metadata":{},"sourceType":"module"}