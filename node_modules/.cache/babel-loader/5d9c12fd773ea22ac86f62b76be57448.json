{"ast":null,"code":"var _jsxFileName = \"/Users/jasonvo/Code/react-fullstack/client/src/routes/Post.js\",\n    _s = $RefreshSig$();\n\nimport '../css/Post.css';\nimport { useEffect, useState, useContext } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport EditIcon from '@mui/icons-material/Edit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  AuthContext\n} = require(\"../helpers/AuthContext\");\n\nfunction Post() {\n  _s();\n\n  let {\n    id\n  } = useParams();\n  const [postObject, setPostObject] = useState({});\n  const [editTitle, setEditTitle] = useState(false);\n  const [editBody, setEditBody] = useState(false);\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [updatedTitle, setUpdatedTitle] = '';\n  const [updatedBody, setUpdatedBody] = '';\n  const {\n    authState\n  } = useContext(AuthContext);\n  let navigate = useNavigate();\n  useEffect(() => {\n    if (!localStorage.getItem('accessToken')) {\n      navigate('/login');\n    } else {\n      axios.get(`http://localhost:3001/posts/${id}`).then(response => {\n        setPostObject(response.data);\n      });\n      axios.get(`http://localhost:3001/comments/${id}`).then(response => {\n        setComments(response.data);\n      });\n    }\n  }, [id, authState.status]);\n\n  const addNewComment = () => {\n    axios.post('http://localhost:3001/comments', {\n      commentBody: newComment,\n      PostId: id\n    }, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(response => {\n      if (response.data.error) {\n        console.log(response.data.error);\n      } else {\n        setComments([...comments, {\n          id: response.data.id,\n          commentBody: response.data.commentBody,\n          username: response.data.username\n        }]);\n        setNewComment('');\n      }\n    });\n  };\n\n  const deleteComment = id => {\n    axios.delete(`http://localhost:3001/comments/${id}`, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(() => {\n      setComments(comments.filter(val => {\n        return val.id !== id;\n      }));\n    });\n  };\n\n  const deletePost = id => {\n    axios.delete(`http://localhost:3001/posts/${id}`, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(response => {\n      navigate('/');\n    });\n  };\n\n  const editButtonClicked = options => {\n    if (options === 'title') {\n      setEditTitle(true);\n    } else {}\n  };\n\n  const cancel = options => {\n    if (options === 'title') {\n      setEditTitle(false);\n    } else {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"individualPost__container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"individualPost__left\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title__container\",\n        children: !editTitle ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"individualPost__title\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"title__text\",\n            children: postObject.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"editTitleButton\",\n            children: /*#__PURE__*/_jsxDEV(EditIcon, {\n              onClick: () => {\n                editButtonClicked(\"title\");\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title__edit\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Edit Post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              width: '60px',\n              height: '30px',\n              borderRadius: '0'\n            },\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"cancel\",\n            onClick: () => {\n              cancel('title');\n            },\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"individualPost__body\",\n        children: [postObject.postText, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"editBodyButton\",\n          children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"individualPost__footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"username\",\n          children: postObject.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button\",\n          children: authState.username === postObject.username && /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              width: '100px',\n              height: '45px'\n            },\n            onClick: () => {\n              deletePost(postObject.id);\n            },\n            children: \"Delete Post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment__right\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"addComment__container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: newComment,\n          type: \"text\",\n          placeholder: \"Comment...\",\n          autoComplete: \"off\",\n          onChange: event => {\n            setNewComment(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNewComment,\n          children: \"Add Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"listOfComments\",\n        children: comments.map((comment, key) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"commentBody\",\n            children: [comment.commentBody, /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Username: \", comment.username]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 29\n            }, this), authState.username === comment.username && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                deleteComment(comment.id);\n              },\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Post, \"4q/6JqK6yXfrIIJNI3DWpiIXfvk=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/jasonvo/Code/react-fullstack/client/src/routes/Post.js"],"names":["useEffect","useState","useContext","useParams","useNavigate","axios","EditIcon","AuthContext","require","Post","id","postObject","setPostObject","editTitle","setEditTitle","editBody","setEditBody","comments","setComments","newComment","setNewComment","updatedTitle","setUpdatedTitle","updatedBody","setUpdatedBody","authState","navigate","localStorage","getItem","get","then","response","data","status","addNewComment","post","commentBody","PostId","headers","accessToken","error","console","log","username","deleteComment","delete","filter","val","deletePost","editButtonClicked","options","cancel","title","width","height","borderRadius","postText","event","target","value","map","comment","key"],"mappings":"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","sourcesContent":["import '../css/Post.css';\nimport { useEffect, useState, useContext } from 'react'\nimport { useParams, useNavigate } from 'react-router-dom'\nimport axios from 'axios';\nimport EditIcon from '@mui/icons-material/Edit';\nconst { AuthContext } = require(\"../helpers/AuthContext\")\n\nfunction Post() {\n    let { id } = useParams();\n    const [postObject, setPostObject] = useState({});\n    const [editTitle, setEditTitle] = useState(false)\n    const [editBody, setEditBody] = useState(false)\n    const [comments, setComments] = useState([]);\n    const [newComment, setNewComment] = useState('');\n    const [updatedTitle,  setUpdatedTitle] = ('')\n    const [updatedBody,  setUpdatedBody] = ('')\n    const { authState } = useContext(AuthContext)\n\n    let navigate = useNavigate()\n\n    useEffect(() => {\n        if (!localStorage.getItem('accessToken')) {\n            navigate('/login')\n        } else {\n            axios.get(`http://localhost:3001/posts/${id}`).then((response) => {\n                setPostObject(response.data)\n            })\n            axios.get(`http://localhost:3001/comments/${id}`).then((response) => {\n                setComments(response.data)\n            })\n        }\n    }, [id, authState.status]);\n\n    const addNewComment = () => {\n        axios.post('http://localhost:3001/comments', {\n            commentBody: newComment,\n            PostId: id\n        }, {\n            headers: {\n                accessToken: localStorage.getItem(\"accessToken\")\n            } \n        })\n        .then((response) => {\n            if (response.data.error) {\n                console.log(response.data.error)\n            } else {\n                setComments([...comments, { id: response.data.id, commentBody: response.data.commentBody, username: response.data.username }]);\n                setNewComment('');\n            }\n        })\n    }\n\n    const deleteComment = (id) => {\n        axios.delete(`http://localhost:3001/comments/${id}`, { \n            headers: {\n                accessToken: localStorage.getItem(\"accessToken\")\n            }\n        }).then(() => {\n            setComments(comments.filter(val => {\n                return val.id !== id;\n            }))\n        })\n    }\n\n    const deletePost = (id) => {\n        axios.delete(`http://localhost:3001/posts/${id}`, { \n            headers: {\n                accessToken: localStorage.getItem(\"accessToken\")\n            }\n        }).then((response) => {\n            navigate('/')\n        })\n    }\n\n    const editButtonClicked = (options) => {\n        if (options === 'title') {\n            setEditTitle(true)\n        } else {\n\n        }\n    }\n\n    const cancel = (options) => {\n        if (options === 'title') {\n            setEditTitle(false)\n        } else {\n\n        }\n    }\n\n    return (\n        <div className=\"individualPost__container\">\n            <div className=\"individualPost__left\">\n                <div className=\"title__container\">{!editTitle ?  (\n                    <div className='individualPost__title'>\n                        <div className='title__text'>\n                            {postObject.title}\n                        </div>\n                        <div className='editTitleButton'>\n                            <EditIcon onClick={() => {\n                                editButtonClicked(\"title\")\n                            }}></EditIcon>\n                        </div>\n                    </div>\n                )\n                : (\n                <div className='title__edit'>\n                    <input type='text' placeholder='Edit Post' />\n                    <button style={{ width: '60px', height: '30px', borderRadius: '0' }}>Update</button>\n                    <button className='cancel' onClick={() => {\n                        cancel('title')\n                    }} >Cancel</button>\n                </div>\n                )}\n                </div>\n                <div className=\"individualPost__body\">\n                    {postObject.postText}\n                    <div className='editBodyButton'>\n                        <EditIcon></EditIcon>\n                    </div>\n                </div>\n                <div className=\"individualPost__footer\">\n                    <div className='username'>\n                        {postObject.username}\n                    </div>\n                    <div className=\"button\">{authState.username === postObject.username && (\n                            <button style={{ width: '100px', height: '45px' }} onClick={() => {\n                            deletePost(postObject.id)\n                        }}>Delete Post</button>\n                    )}\n                    </div>\n                </div>\n            </div>\n            <div className=\"comment__right\">\n                <div className='addComment__container'>\n                    <input value={newComment} type=\"text\" placeholder=\"Comment...\" autoComplete='off' onChange={(event) => { setNewComment(event.target.value) }} />\n                    <button onClick={addNewComment}>Add Comment</button>\n                </div>\n                <div className='listOfComments'>\n                    {comments.map((comment, key) => { \n                        return (\n                            <div className='commentBody'>{comment.commentBody}\n                            <label>Username: {comment.username}</label>\n                            {authState.username === comment.username && (\n                                <button onClick={() =>{ deleteComment(comment.id) }}>Delete</button>\n                            )}\n                        </div>\n                        )\n                    })}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Post\n"]},"metadata":{},"sourceType":"module"}